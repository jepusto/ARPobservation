% Generated by roxygen2 (4.0.1): do not edit by hand
\name{interim_bounds}
\alias{interim_bounds}
\title{Interim bounds and confidence interval}
\usage{
interim_bounds(PIR, phase, first_level_base = TRUE, conf_level = 0.95,
  intervals = NA, exponentiate = FALSE)
}
\arguments{
\item{PIR}{vector of PIR measurements}

\item{phase}{factor or vector indicating levels of the PIR measurements.}

\item{first_level_base}{logical. Is the first level in the factor or vector \code{phase} the baseline level?}

\item{conf_level}{\code{.95} (default) or the desired nominal confidence level of the calculated confidence interval}

\item{intervals}{\code{NA} (default) or the number of intervals in the sample of observations}

\item{exponentiate}{logical. Should the log of the bounds and the confidence interval be exponentiated?}
}
\value{
A list containing four elements
}
\description{
This function calculates a bound for the log of the ratio of interim time of two samples (referred to as baseline and treatment) of partial interval recording (PIR) data as well as an approximate confidence interval
}
\details{
The \code{PIR} vector can be in any order corresponding to the factor or vector \code{phase}. The levels of \code{phase} can be any two levels, such as "A" and "B", "base" and "treat", or "0" and "1". If there are more than two levels in \code{phase} this function will not work. By default it is assumed that the first level in \code{phase} is the baseline level. This behavior can be changed by \code{first_level_base} to \code{FALSE}.
\code{intervals} is the number of intervals in the observations. This is a single value and is assumed to be constant across both samples and all observations. This value is only relevant if the mean of one of the samples is at the floor or ceiling of 0 or 1. In that case it will be used to truncate the sample mean. If the sample mean is at the floor or ceiling and no value for \code{intervals} is provided, the function will stop.
}
\examples{
#get an estimate and CI for Carl from the Moes dataset
data(FMexample)
PIR <- Moes[1:20,4]
phase <- Moes[1:20, 2]
interim_bounds(PIR = PIR, phase = phase, first_level_base = FALSE)
}

